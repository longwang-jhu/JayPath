{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BrianSong\\\\Desktop\\\\JHU\\\\Obj. Orient Software Eng\\\\2020-spring-group-JayPath\\\\client\\\\src\\\\CoursesPrioritized.js\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Autosuggest from 'react-autosuggest';\n\nclass CoursesPrioritized extends Component {\n  constructor(prop) {\n    super(prop);\n\n    this.getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.allCourses.filter(ac => ac.CourseTitle.toLowerCase().slice(0, inputLength) === inputValue);\n    };\n\n    this.getSuggestionValue = suggestion => suggestion.CourseTitle;\n\n    this.renderSuggestion = (suggestion, {\n      query,\n      isHighlighted\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      class: \"span1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, suggestion.CourseTitle);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (event, {\n      suggestion,\n      suggestionValue,\n      suggestionIndex,\n      sectionIndex,\n      method\n    }) => {\n      if (this.state.myCourses.includes(suggestionValue)) {\n        alert(suggestionValue + ' added already. Add a different course!');\n      } else {\n        alert('Successfully added ' + suggestionValue + '!');\n        const updatedCourses = this.state.myCourses.concat(suggestionValue);\n        this.setState({\n          myCourses: updatedCourses,\n          value: \"\"\n        });\n      }\n    };\n\n    this.handleDelete = course => {\n      const courses = this.state.myCourses.filter(c => c != course);\n      this.setState({\n        myCourses: courses\n      });\n    };\n\n    this.state = {\n      question: \"Are there courses that particularly interest you?\",\n      note: \"(We will include as many of them in your path as possible.)\",\n      value: '',\n      finalValue: '',\n      suggestions: [],\n      allCourses: [],\n      myCourses: []\n    };\n  } // function to get course list from server\n\n\n  callAPI() {\n    console.log(\"fetching from api\");\n    fetch(\"http://localhost:5000/api/courses\") // to be changed\n    .then(res => res.json()).then(res => this.setState({\n      allCourses: res\n    })).catch(err => err);\n  } // function to send prioritized course information to server\n\n\n  sendAPI(data) {\n    console.log(\"posting to api\");\n    console.log(JSON.stringify(data));\n    fetch('http://localhost:5000/api/courses_prioritized', {\n      // mode: 'no-cors',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.json()).then(data => console.log(\"Success\", data)).catch(err => console.log(\"Error:\", err));\n  }\n\n  componentDidMount() {\n    this.callAPI();\n  } // Teach Autosuggest how to calculate suggestions for any given input value.\n\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'course name',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      class: \"question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, this.state.question), /*#__PURE__*/React.createElement(\"text1\", {\n      class: \"question2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, this.state.note), /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      onSuggestionSelected: this.onSuggestionSelected //renderSuggestionsContainer={this.renderSuggestionsContainer}\n      ,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"coursesBox_p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, this.state.myCourses.map(course => /*#__PURE__*/React.createElement(Course, {\n      course: course,\n      onDelete: () => this.handleDelete(course),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }))), \"\\xA0\", /*#__PURE__*/React.createElement(\"div\", {\n      class: \"as_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"fieldset\", {\n      id: \"fs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/focus_area\",\n      style: {\n        textDecoration: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sendAPI(this.state.myCourses),\n      class: \"button0\",\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, \"THAT'S IT!\", /*#__PURE__*/React.createElement(\"button\", {\n      class: \"iconfont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 19\n      }\n    }, \"\\uE627\"))))));\n  }\n\n} // component for single course entry\n\n\nfunction Course(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"courseItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, props.course, /*#__PURE__*/React.createElement(\"button\", {\n    class: \"delete\",\n    onClick: props.onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, \"x\"));\n}\n\n;\nexport default CoursesPrioritized;","map":{"version":3,"sources":["C:/Users/BrianSong/Desktop/JHU/Obj. Orient Software Eng/2020-spring-group-JayPath/client/src/CoursesPrioritized.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Link","Autosuggest","CoursesPrioritized","constructor","prop","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","state","allCourses","filter","ac","CourseTitle","slice","getSuggestionValue","suggestion","renderSuggestion","query","isHighlighted","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","suggestionIndex","sectionIndex","method","myCourses","includes","alert","updatedCourses","concat","handleDelete","course","courses","c","question","note","finalValue","callAPI","console","log","fetch","then","res","json","catch","err","sendAPI","data","JSON","stringify","headers","body","componentDidMount","render","inputProps","placeholder","map","textDecoration","Course","props","onDelete"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\n\r\nclass CoursesPrioritized extends Component {\r\n    constructor(prop) {\r\n      super(prop);\r\n      this.state = {\r\n        question: \"Are there courses that particularly interest you?\",\r\n        note: \"(We will include as many of them in your path as possible.)\",\r\n        value: '',\r\n        finalValue: '',\r\n        suggestions: [],\r\n        allCourses: [],\r\n        myCourses: []\r\n      };\r\n    }\r\n\r\n    // function to get course list from server\r\n    callAPI() {\r\n      console.log(\"fetching from api\");\r\n      fetch(\"http://localhost:5000/api/courses\") // to be changed\r\n        .then(res => res.json())\r\n        .then(res => this.setState({ allCourses: res }))\r\n        .catch(err => err);\r\n    }\r\n\r\n    // function to send prioritized course information to server\r\n    sendAPI(data) {\r\n      console.log(\"posting to api\");\r\n      console.log(JSON.stringify(data));\r\n      fetch('http://localhost:5000/api/courses_prioritized', {\r\n        // mode: 'no-cors',\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },\r\n        body: JSON.stringify(data)\r\n      }).then(res => res.json())\r\n      .then(data => console.log(\"Success\", data))\r\n      .catch(err => console.log(\"Error:\", err));\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.callAPI();\r\n    }\r\n\r\n    // Teach Autosuggest how to calculate suggestions for any given input value.\r\n    getSuggestions = value => {\r\n      const inputValue = value.trim().toLowerCase();\r\n      const inputLength = inputValue.length;\r\n\r\n      return inputLength === 0 ? [] : this.state.allCourses.filter(ac =>\r\n        ac.CourseTitle.toLowerCase().slice(0, inputLength) === inputValue\r\n      );\r\n    };\r\n\r\n    // When suggestion is clicked, Autosuggest needs to populate the input\r\n    // based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n    // input value for every given suggestion.\r\n    getSuggestionValue = suggestion => suggestion.CourseTitle;\r\n\r\n    // Use your imagination to render suggestions.\r\n    renderSuggestion = (suggestion, { query, isHighlighted }) => (\r\n      <div class=\"span1\">\r\n      {suggestion.CourseTitle}\r\n    </div>\r\n    );\r\n\r\n    onChange = (event, { newValue }) => {\r\n      this.setState({\r\n        value: newValue\r\n      });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to update suggestions.\r\n      // You already implemented this logic above, so just use it.\r\n      onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n          suggestions: this.getSuggestions(value)\r\n        });\r\n      };\r\n\r\n      // Autosuggest will call this function every time you need to clear suggestions.\r\n      onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n          suggestions: []\r\n        });\r\n      };\r\n\r\n      onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\r\n        if (this.state.myCourses.includes(suggestionValue)) {\r\n          alert(suggestionValue + ' added already. Add a different course!');\r\n        } else {\r\n          alert('Successfully added ' + suggestionValue + '!');\r\n          const updatedCourses = this.state.myCourses.concat(suggestionValue);\r\n          this.setState({\r\n            myCourses: updatedCourses,\r\n            value: \"\"\r\n          });\r\n        }\r\n\r\n\r\n\r\n      }\r\n\r\n      // De-select course entry\r\n      handleDelete = course => {\r\n        const courses = this.state.myCourses.filter(c => c != course);\r\n        this.setState({\r\n          myCourses: courses\r\n        });\r\n      };\r\n\r\n    render() {\r\n        const { value, suggestions } = this.state;\r\n\r\n        // Autosuggest will pass through all these props to the input.\r\n        const inputProps = {\r\n          placeholder: 'course name',\r\n          value,\r\n          onChange: this.onChange\r\n        };\r\n\r\n        return (\r\n          <div class=\"center\">\r\n            <h1 class = \"question\">\r\n              {this.state.question}\r\n            </h1>\r\n            <text1 class = \"question2\">\r\n                {this.state.note}\r\n            </text1>\r\n          <Autosuggest\r\n            suggestions={suggestions}\r\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n            getSuggestionValue={this.getSuggestionValue}\r\n            renderSuggestion={this.renderSuggestion}\r\n            onSuggestionSelected= {this.onSuggestionSelected}\r\n            //renderSuggestionsContainer={this.renderSuggestionsContainer}\r\n            inputProps={inputProps}\r\n          />\r\n\r\n          <div class = \"coursesBox_p\">\r\n          {this.state.myCourses.map(course => (\r\n            <Course course = {course} onDelete = {() => this.handleDelete(course)}\r\n            />\r\n          ))}\r\n        </div>\r\n   \r\n        <div class=\"as_container\">\r\n          <fieldset id=\"fs\">\r\n            <Link to=\"/focus_area\" style={{ textDecoration: 'none' }}>\r\n                <button onClick = {() => this.sendAPI(this.state.myCourses)} class=\"button0\" type=\"button\">\r\n                  THAT'S IT!\r\n                  <button class=\"iconfont\">&#xe627;</button>\r\n                </button>\r\n            </Link>\r\n          </fieldset>\r\n        </div>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  // component for single course entry\r\n  function Course(props){\r\n    return (\r\n      <div class = \"courseItem\">\r\n      {props.course}\r\n      <button class = \"delete\" onClick = {props.onDelete}>x</button>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  export default CoursesPrioritized;\r\n"]},"metadata":{},"sourceType":"module"}