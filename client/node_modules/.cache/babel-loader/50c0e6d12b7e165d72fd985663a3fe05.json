{"ast":null,"code":"var _jsxFileName = \"/Users/rongbao/Desktop/2020-spring-group-JayPath/client/src/CoursesPrioritized.js\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Autosuggest from 'react-autosuggest';\n\nclass CoursesPrioritized extends Component {\n  constructor(prop) {\n    super(prop);\n\n    this.getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.allCourses.filter(ac => ac.CourseTitle.toLowerCase().slice(0, inputLength) === inputValue);\n    };\n\n    this.getSuggestionValue = suggestion => suggestion.CourseTitle;\n\n    this.renderSuggestion = (suggestion, {\n      query,\n      isHighlighted\n    }) => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, suggestion.CourseTitle);\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (event, {\n      suggestion,\n      suggestionValue,\n      suggestionIndex,\n      sectionIndex,\n      method\n    }) => {\n      if (this.state.myCourses.includes(suggestionValue)) {\n        alert(suggestionValue + ' added already. Add a different course!');\n      } else {\n        alert('Successfully added ' + suggestionValue + '!');\n        const updatedCourses = this.state.myCourses.concat(suggestionValue);\n        this.setState({\n          myCourses: updatedCourses,\n          value: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      question: \"What courses have you taken?\",\n      value: '',\n      finalValue: '',\n      suggestions: [],\n      allCourses: [],\n      myCourses: []\n    };\n  }\n\n  callAPI() {\n    console.log(\"fetching from api\");\n    fetch(\"http://localhost:5000/api/courses\") // to be changed\n    .then(res => res.json()).then(res => this.setState({\n      allCourses: res\n    })).catch(err => err);\n  }\n\n  sendAPI(data) {\n    console.log(\"posting to api\");\n    console.log(JSON.stringify(data));\n    fetch('http://localhost:5000/api/user_info', {\n      mode: 'no-cors',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(res => res.json()).then(data => console.log(\"Success\", data)).catch(err => console.log(\"Error:\", err));\n  }\n\n  componentDidMount() {\n    this.callAPI();\n  } // Teach Autosuggest how to calculate suggestions for any given input value.\n\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'course name',\n      value,\n      onChange: this.onChange\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      class: \"question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, this.state.question), /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      onSuggestionSelected: this.onSuggestionSelected //renderSuggestionsContainer={this.renderSuggestionsContainer}\n      ,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, this.state.myCourses.map(data => /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 51\n      }\n    }, data))), \"\\xA0\", /*#__PURE__*/React.createElement(Link, {\n      to: \"/focus_area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.sendAPI(this.state.myCourses),\n      class: \"button0\",\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }, \"THAT'S IT!\"), /*#__PURE__*/React.createElement(\"i\", {\n      class: \"iconfont\",\n      style: {\n        position: \"absolute\",\n        right: \"40px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 15\n      }\n    }, \"\\uE627\")));\n  }\n\n}\n\nexport default CoursesPrioritized;","map":{"version":3,"sources":["/Users/rongbao/Desktop/2020-spring-group-JayPath/client/src/CoursesPrioritized.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Link","Autosuggest","CoursesPrioritized","constructor","prop","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","state","allCourses","filter","ac","CourseTitle","slice","getSuggestionValue","suggestion","renderSuggestion","query","isHighlighted","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","suggestionIndex","sectionIndex","method","myCourses","includes","alert","updatedCourses","concat","question","finalValue","callAPI","console","log","fetch","then","res","json","catch","err","sendAPI","data","JSON","stringify","mode","headers","body","componentDidMount","render","inputProps","placeholder","map","position","right"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Autosuggest from 'react-autosuggest';\n\nclass CoursesPrioritized extends Component {\n    constructor(prop) {\n      super(prop);\n      this.state = {\n        question: \"What courses have you taken?\",\n        value: '',\n        finalValue: '',\n        suggestions: [],\n        allCourses: [],\n        myCourses: []\n      };\n    }\n  \n    callAPI() {\n      console.log(\"fetching from api\");\n      fetch(\"http://localhost:5000/api/courses\") // to be changed\n        .then(res => res.json())\n        .then(res => this.setState({ allCourses: res }))\n        .catch(err => err);\n    }\n  \n    sendAPI(data) {\n      console.log(\"posting to api\");\n      console.log(JSON.stringify(data));\n      fetch('http://localhost:5000/api/user_info', {\n        mode: 'no-cors',\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },\n        body: JSON.stringify(data)\n      }).then(res => res.json())\n      .then(data => console.log(\"Success\", data))\n      .catch(err => console.log(\"Error:\", err));\n    }\n  \n    componentDidMount() {\n      this.callAPI();\n    }\n  \n    // Teach Autosuggest how to calculate suggestions for any given input value.\n    getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n    \n      return inputLength === 0 ? [] : this.state.allCourses.filter(ac =>\n        ac.CourseTitle.toLowerCase().slice(0, inputLength) === inputValue\n      );\n    };\n    \n    // When suggestion is clicked, Autosuggest needs to populate the input\n    // based on the clicked suggestion. Teach Autosuggest how to calculate the\n    // input value for every given suggestion.\n    getSuggestionValue = suggestion => suggestion.CourseTitle;\n    \n    // Use your imagination to render suggestions.\n    renderSuggestion = (suggestion, { query, isHighlighted }) => (\n      <span>\n        {suggestion.CourseTitle}\n      </span>\n    );\n  \n    onChange = (event, { newValue }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n  \n    // Autosuggest will call this function every time you need to update suggestions.\n      // You already implemented this logic above, so just use it.\n      onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n          suggestions: this.getSuggestions(value)\n        });\n      };\n    \n      // Autosuggest will call this function every time you need to clear suggestions.\n      onSuggestionsClearRequested = () => {\n        this.setState({\n          suggestions: []\n        });\n      };\n  \n      onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n        if (this.state.myCourses.includes(suggestionValue)) {\n          alert(suggestionValue + ' added already. Add a different course!');\n        } else {\n          alert('Successfully added ' + suggestionValue + '!');\n          const updatedCourses = this.state.myCourses.concat(suggestionValue);\n          this.setState({\n            myCourses: updatedCourses,\n            value: \"\"\n          });\n        }\n        \n      }\n  \n    render() {\n        const { value, suggestions } = this.state;\n    \n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n          placeholder: 'course name',\n          value,\n          onChange: this.onChange\n        };\n        \n        return (\n          <div class=\"center\">\n            <h1 class = \"question\">\n              {this.state.question}\n            </h1>\n          <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n            getSuggestionValue={this.getSuggestionValue}\n            renderSuggestion={this.renderSuggestion}\n            onSuggestionSelected= {this.onSuggestionSelected}\n            //renderSuggestionsContainer={this.renderSuggestionsContainer}\n            inputProps={inputProps}\n          />\n          \n          <div>{this.state.myCourses.map(data => (<li>{data}</li>))}</div>\n        \n          <Link to=\"/focus_area\">\n              <button onClick = {() => this.sendAPI(this.state.myCourses)} class=\"button0\" type=\"button\">\n                THAT'S IT!\n              </button>\n              <i class=\"iconfont\" style={{position: \"absolute\", right: \"40px\"}}>&#xe627;</i>\n           </Link>\n          \n          </div>\n      );\n    }\n  }\n\n  export default CoursesPrioritized;"]},"metadata":{},"sourceType":"module"}